/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.5.3 rock-scene.glb --transform 
Files: rock-scene.glb [11.17MB] > /Users/cullen/Projects/portfolio-r3f/public/rock-scene-transformed.glb [1.1MB] (90%)
*/

import React, { useRef, useState, useEffect, useMemo } from "react";
import * as THREE from "three";
import {
	MeshTransmissionMaterial,
	MeshReflectorMaterial,
	useGLTF,
	Float,
	Text,
} from "@react-three/drei";
import { useFrame, useLoader } from "@react-three/fiber";

export function Model(props) {
	const { nodes, materials } = useGLTF("/rock-scene.glb");

	return (
		<group {...props} dispose={null}>
			<mesh
				geometry={nodes.Rock.geometry}
				material={materials.Rock_baked}
				position={[0, 0.189, 0]}
			/>
			<ReflectiveWater />
			<VideoText position={[0, 3, -8]} />
			<mesh geometry={nodes.Teleporter.geometry} position={[0, -0.1, 0]}>
				<MeshTransmissionMaterial
					transmission={0.5}
					color={"#878787"}
					backside
					backsideThickness={10}
					thickness={2}
					roughness={0.05}
					anisotropicBlur={0}
					backsideResolution={0}
				/>
			</mesh>

      <mesh geometry={nodes.Wiresmall.geometry} material={materials.Wire} position={[9.5, 0.047, -5]} />
      <mesh geometry={nodes.Wiresmall001.geometry} material={materials.Wire} position={[-5.196, -0.291, -2.13]} />
      <mesh geometry={nodes.Wire001.geometry} material={materials.Wire} position={[8.543, 0.047, -3.157]} rotation={[0, 0, -Math.PI / 2]} />
      <mesh geometry={nodes.Wire.geometry} material={materials.Wire} position={[-2.085, 0.116, -1.067]} rotation={[0, 0, -Math.PI / 2]} />

			<mesh geometry={nodes.Light.geometry} position={[0, 0.3, 0]}>
				<meshPhysicalMaterial
					color={"#50DDFF"}
					roughness={0.5}
					metalness={0.2}
					emissive={"#50DDFF"}
					emissiveIntensity={1}
				/>
			</mesh>
			<mesh geometry={nodes.Light.geometry} position={[0, 0.1, 0]}>
				<meshPhysicalMaterial color={"#000000"} roughness={1.0} metalness={0} />
			</mesh>

			<Float
				speed={3}
				rotationIntensity={1}
				floatIntensity={1}
				floatingRange={[-0.15, 0.15]}
			>
				<Logo nodes={nodes} />
			</Float>
		</group>
	);
}

function Logo({ nodes }) {
	const logoRef = useRef();

	useFrame(() => {
		if (logoRef.current) {
			logoRef.current.rotation.y += 0.02;
		}
	});

	return (
		<group ref={logoRef}>
			<mesh geometry={nodes.logobottom.geometry}>
				<MeshTransmissionMaterial
					backside
					backsideThickness={5}
					thickness={2}
				/>
			</mesh>
			<mesh geometry={nodes.logoleft.geometry}>
				<MeshTransmissionMaterial
					backside
					backsideThickness={5}
					thickness={2}
				/>
			</mesh>
			<mesh geometry={nodes.logoright.geometry}>
				<MeshTransmissionMaterial
					backside
					backsideThickness={5}
					thickness={2}
				/>
			</mesh>
			<mesh geometry={nodes.logotop.geometry}>
				<MeshTransmissionMaterial
					backside
					backsideThickness={5}
					thickness={2}
				/>
			</mesh>
		</group>
	);
}

function VideoText(props) {
	const [video] = useState(() =>
		Object.assign(document.createElement("video"), {
			src: "/video.mp4",
			crossOrigin: "Anonymous",
			loop: true,
			muted: true,
		})
	);
	useEffect(() => void video.play(), [video]);

	const videoTexture = new THREE.VideoTexture(video);
	videoTexture.encoding = THREE.sRGBEncoding;

	return (
		<Text
			font="/bootzy.ttf"
			fontSize={9}
			letterSpacing={0}
			geometryArgs={{ uvGenerator: null }} // Ensure proper UV mapping
			{...props}
		>
			COMPLICIT*
			<meshStandardMaterial
				toneMapped={false}
				emissive={"#50DDFF"}
				emissiveIntensity={2}
				emissiveMap={videoTexture}
			/>
		</Text>
	);
}

function ReflectiveWater() {
	const waterBump = useLoader(THREE.TextureLoader, "/waterbump.png");
	const materialRef = useRef();

	// Scale and animate the distortion
	useFrame((state) => {
		const time = state.clock.getElapsedTime();
		if (materialRef.current) {
			materialRef.current.distortion =
				1 + 2.0 * (1 + Math.sin(time + Math.PI / 4));
		}
	});

	return (
		<mesh
			receiveShadow
			rotation={[-Math.PI / 2, 0, 0]}
			position={[0, -0.18, 0]}
		>
			<planeGeometry args={[20, 20]} />
			<MeshReflectorMaterial
				ref={materialRef}
				blur={[100, 100]}
				mixBlur={1.0}
				mixStrength={180}
				resolution={2048}
				roughness={1.0}
				depthScale={12}
				minDepthThreshold={0.5}
				maxDepthThreshold={0.6}
				color="#555555"
				metalness={0.6}
				distortionMap={waterBump}
				distortion={0.3}
			/>
		</mesh>
	);
}

useGLTF.preload("/rock-scene.glb");
